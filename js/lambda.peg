{
   function makeApply(exprs){
    if(exprs.length == 1)
      return exprs[0];
    else{
      apply = {
        type:'apply',
        a: exprs[0],
        b: exprs[1]
      };
      for(var i = 2; i < exprs.length; i++){
        apply = {
          type:'apply',
          a: apply,
          b: exprs[i]
        }
      }
      return apply;
    }
  }
  function makeLambda(args, body){
    if(args.length == 1)
      return {
        type:"lambda", 
        arg:args[0], 
        body:body
      };
    else
      return {
        type:"lambda", 
        arg:args[0], 
        body:makeLambda(args.slice(1), body)
      };
  }
}
start = exprs:expr* { return makeApply(exprs); }

expr = expr:(parens / lambda / name / integer) ' '* {
  return expr;
}

parens = "(" expr:start ")" { return expr; }

lambda = "&" args:name* "." body:start { 
  return makeLambda(args, body);
}

name = name:([a-z] / [A-Z] / '+' / '-' / '*' ) {
  return {type:"name", name:name};
}

integer = digit:[0-9] { 
  return {
    type:"number",
    name:"FFFF",
    value: parseInt(digit)
  };
}
